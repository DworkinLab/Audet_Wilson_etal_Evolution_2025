color = treatment,
shape = sex)) + geom_point(alpha = 0.5) +
geom_smooth(aes(linetype = sex), method = "lm", alpha = 0.25) +
xlab("Thorax Length (log2 um)")
theme(legend.title = element_blank())
ggplot(wide_fly,
aes(y = wing, x = thorax,
color = treatment,
shape = sex)) + geom_point(alpha = 0.5) +
geom_smooth(aes(linetype = sex), method = "lm", alpha = 0.25) +
xlab("Thorax Length (log2 um)")
theme(legend.title = element_blank())
ggplot(wide_fly,
aes(y = head, x = thorax,
color = treatment,
shape = sex)) + geom_point(alpha = 0.5) +
geom_smooth(aes(linetype = sex), method = "lm", alpha = 0.25) +
xlab("Thorax Length (log2 um)") +
theme(legend.title = element_blank())
ggplot(wide_fly,
aes(y = femur, x = thorax,
color = treatment,
shape = sex)) + geom_point(alpha = 0.5) +
geom_smooth(aes(linetype = sex), method = "lm", alpha = 0.25) +
xlab("Thorax Length (log2 um)") +
theme(legend.title = element_blank())
ggplot(wide_fly,
aes(y = tibia, x = thorax,
color = treatment,
shape = sex)) + geom_point(alpha = 0.5) +
geom_smooth(aes(linetype = sex), method = "lm", alpha = 0.25) +
xlab("Thorax Length (log2 um)") +
theme(legend.title = element_blank())
dummy_code <- with(wide_fly,
interaction(replicate, treatment, sex,
drop = T))
VCV_matrices <- with(wide_fly,
by(wide_fly[, c(6:11)],
dummy_code,
function(x) cov(x, use = "pairwise.complete.obs")))
# correlation matrices just to look at
print(lapply(VCV_matrices, function(x) cov2cor(x) ), digits = 2)
# proportion of variance accounted for by each eigenvalue
eig_vals_mats <- sapply(VCV_matrices, function(x) svd(x)$d/sum(svd(x)$d))
print(eig_vals_mats, digits = 2)
# principal eigenvector
eig_vecs_mats <- sapply(VCV_matrices, function(x) eigen(x)$vectors[,1])
print(eig_vecs_mats, digits = 2)
# FYI, the expectation for a vector of isometry would be coefficients of
print( rep(1/sqrt(6), 6), digits = 2)
# correlation matrices just to look at
print(lapply(VCV_matrices, function(x) cov2cor(x) ), digits = 2)
eig_vals_mats
print(eig_vals_mats, digits = 2)
print(eig_vecs_mats, digits = 2)
q()
library(tidyr)
library(skimr)
library(ggplot2)
library(ggbeeswarm)
library(ggridges)
library(glmmTMB)
library(emmeans)
library(effects)
library(dotwhisker)
library(car)
library(olsrr)
library(boot)
library(DHARMa)
library(dplyr)
library(plyr)
rawdat <- read.csv("../data/TA_Measurements_F75_working.csv")
# Turn my unmeasureables into NAs
index_50 <- which(rawdat$Length_px < 50)
rawdat$Length_px[index_50] <- NA
#Find and remove duplicate measures
length(rawdat$Label)
length(unique(rawdat$Label))
which(duplicated(rawdat$Label))
rawdat <- rawdat[-c(which(duplicated(rawdat$Label))),]
length(rawdat$Label)
length(unique(rawdat$Label))
# Convert to um from pixel
rawdat$length_um <- rawdat$Length_px * 1.8599975
rawdat$log_size <- log2(rawdat$length_um)
rawdat$log_size <- log2(rawdat$length_um)
rawdat_seperate <- separate(rawdat,
col = Label,
into = c("Imager","Replicate","Cohort","Sex","Trait", "Individual"), sep = "_")
rawdat_seperate$Individual <- gsub(x = rawdat_seperate$Individual,
pattern = ".tif",
replacement = "")
rawdat_seperate$Cohort <- gsub(x = rawdat_seperate$Cohort,
pattern = "C",
replacement = "")
with(rawdat_seperate[rawdat_seperate$Trait == "HEAD",],
table(interaction(Replicate, Sex, drop = T), Cohort))
rawdat_seperate$fly_id <- paste(rawdat_seperate$Replicate,
rawdat_seperate$Cohort,
rawdat_seperate$Sex,
rawdat_seperate$Individual,
sep = "_")
names(rawdat_seperate)
rawdat_simple <- rawdat_seperate[, c(3,4,5,6,10,11)]
### Trying to fix sex here
rawdat_simple$fly_id <- gsub("UCTR2_0_F_10", "UCTR2_0_M_21", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("UCTR4_2_F_15", "UCTR4_2_M_21", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("NTR1_1_M_19", "NTR1_1_F_21", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("NTR1_2_F_10", "NTR1_2_M_21", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("NTR1_2_F_12", "NTR1_2_M_22", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("NTR1_2_F_7", "NTR1_2_M_23", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("NTR2_2_F_19", "NTR2_2_M_21", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("NTR3_0_F_15", "NTR3_0_M_21", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("NTR3_0_F_16", "NTR3_0_M_22", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("NTR3_0_F_3", "NTR3_0_M_23", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("NTR4_0_F_20", "NTR4_0_M_21", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("SCTR2_0_F_3", "SCTR2_0_M_21", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("SCTR1_0_M_6", "SCTR1_0_F_21", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("SCTR2_1_M_4", "SCTR2_1_F_21", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("SCTR2_2_F_4", "SCTR2_2_M_21", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("SCTR3_1_M_14", "SCTR3_1_F_21", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("UCTR1_0_F_20", "UCTR1_0_M_21", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("UCTR1_2_F_7", "UCTR1_2_M_21", rawdat_simple$fly_id)
#### Sex has been corrected in fly_id, now to remove old columns, reseperate out fly_id and then recreate fly_id
# I swear this seems easier than doing this in excel.
rawdat_simple <- rawdat_simple[,-c(1:3)]
rawdat_simple <- separate(rawdat_simple,
col = fly_id,
into = c("Replicate","Cohort","Sex","Individual"), sep = "_")
rawdat_seperate$fly_id <- paste(rawdat_seperate$Replicate,
rawdat_seperate$Cohort,
rawdat_seperate$Sex,
rawdat_seperate$Individual,
sep = "_")
## re-check sample sizes since sex changed sample sizes
with(rawdat_simple[rawdat_simple$Trait == "HEAD",],
table(interaction(Replicate, Sex, drop = T), Cohort))
##
wide_fly <- as.data.frame(pivot_wider(rawdat_simple,
names_from = "Trait",
values_from = "log_size"))
head(wide_fly)
wide_fly <- wide_fly %>%
separate(Replicate,
into = c("Treatment", "Replicate"),
sep = "(?<=[A-Za-z])(?=[0-9])"
)
colnames(wide_fly) <- tolower(colnames(wide_fly))
wide_fly$cohort <- as.numeric(wide_fly$cohort)
missing_by_row <- apply(wide_fly, MARGIN = 1, anyNA)
dim(wide_fly)
length(missing_by_row )
temp_dat <- wide_fly[missing_by_row ,]
# for a matrix or array, apply can be super useful
apply(wide_fly[, 6:11], MARGIN = 2, quantile, na.rm = TRUE)
# or sapply will do the same since this is a data.frame we are using
sapply(wide_fly[, 6:11], quantile, na.rm = TRUE)
with(wide_fly,
tapply(head,
INDEX = list(interaction(treatment, replicate, drop = T), cohort, sex),
max, na.rm = TRUE))
with(wide_fly,
tapply(thorax,
INDEX = list(interaction(treatment, replicate, drop = T), cohort, sex),
max, na.rm = TRUE))
with(wide_fly,
tapply(wing,
INDEX = list(interaction(treatment, replicate, drop = T), cohort, sex),
max, na.rm = TRUE))
with(wide_fly,
tapply(femur,
INDEX = list(interaction(treatment, replicate, drop = T), cohort, sex),
max, na.rm = TRUE))
with(wide_fly,
tapply(tibia,
INDEX = list(interaction(treatment, replicate, drop = T), cohort, sex),
max, na.rm = TRUE))
with(wide_fly,
tapply(tarsus,
INDEX = list(interaction(treatment, replicate, drop = T), cohort, sex),
max, na.rm = TRUE))
skim(wide_fly)
#Trait by sex histogram
ggplot(wide_fly, aes(x = femur, fill = treatment)) +
facet_wrap(vars(sex)) +
geom_histogram(binwidth = 0.05, alpha = 0.8)
# ID: I added this in
ggplot(wide_fly, aes(x = femur, colour = treatment)) +
geom_density(alpha = 0.7) +
facet_wrap(vars(sex))
# NOTE FROM ID: but you may find ridge plots easier to see
ggplot(wide_fly, aes(x = femur, y = treatment, colour = treatment)) +
geom_density_ridges(alpha = 0.5) +
facet_wrap(vars(sex))
#relevel sex
wide_fly$sex <- as.factor(wide_fly$sex)
wide_fly$sex <- relevel(wide_fly$sex, "M")
wide_fly$treatment <- factor(wide_fly$treatment)
wide_fly$treatment <- relevel(wide_fly$treatment, "NTR")
wide_fly$replicate <- as.factor(wide_fly$replicate)
# centre thorax
wide_fly$thorax_c <- scale(wide_fly$thorax,
center = TRUE, scale = FALSE)
# Is thorax changing (so does it remain a useful covariate)?
thorax_model1 <- glmmTMB(thorax ~ (sex + treatment + cohort)^2
+ diag(1 + cohort| treatment:replicate),
data = wide_fly)
summary(thorax_model1)
car::Anova(thorax_model1)
#wing model
wing_Allometry <- glmmTMB(wing ~ (sex + treatment + thorax_c)^3
+ diag(1 + thorax_c | treatment:replicate),
data = wide_fly)
summary(wing_Allometry)
car::Anova(wing_Allometry)
# head
head_Allometry <- glmmTMB(head~ (sex + treatment + thorax_c)^3
+ diag(1 + thorax_c | treatment:replicate),
data = wide_fly)
summary(head_Allometry)
car::Anova(head_Allometry)
# femur
femur_Allometry <- glmmTMB(femur ~ (sex + treatment + thorax_c)^3
+ diag(1 + thorax_c | treatment:replicate),
data = wide_fly)
summary(femur_Allometry)
car::Anova(femur_Allometry)
#Tibia model
tibia_Allometry <- glmmTMB(tibia ~ (sex + treatment + thorax_c)^3
+ diag(1 + thorax_c | treatment:replicate),
data = wide_fly)
summary(tibia_Allometry)
car::Anova(tibia_Allometry)
#tarsus
tarsus_Allometry <- glmmTMB(tarsus ~ (sex + treatment + thorax_c)^3
+ diag(1 + thorax_c | treatment:replicate),
data = wide_fly)
summary(tarsus_Allometry)
car::Anova(tarsus_Allometry)
Quick and dirty plots (will use effects and emmeans for the good plots)
```{r}
ggplot(wide_fly,
aes(y = tarsus, x = thorax,
color = treatment,
shape = sex)) + geom_point(alpha = 0.5) +
geom_smooth(aes(linetype = sex), method = "lm", alpha = 0.25) +
xlab("Thorax Length (log2 um)")
theme(legend.title = element_blank())
ggplot(wide_fly,
aes(y = tibia, x = thorax,
color = treatment,
shape = sex)) + geom_point(alpha = 0.5) +
geom_smooth(aes(linetype = sex), method = "lm", alpha = 0.25) +
xlab("Thorax Length (log2 um)") +
theme(legend.title = element_blank())
```
library(tidyr)
library(skimr)
library(ggplot2)
library(ggbeeswarm)
library(ggridges)
library(glmmTMB)
library(emmeans)
library(effects)
library(dotwhisker)
library(car)
library(olsrr)
library(boot)
library(DHARMa)
library(dplyr)
library(plyr)
#rawdat <- read.csv("../data/TA_Measurements_F75_working.csv")
rawdat <- read.csv("~/Desktop/Terry_flies/TA_Measurements_F75_working.csv")
#pixels per metre = 1.8599975E-06
# Turn my unmeasureables into NAs
index_50 <- which(rawdat$Length_px < 50)
rawdat$Length_px[index_50] <- NA
#Find and remove duplicate measures
length(rawdat$Label)
length(unique(rawdat$Label))
which(duplicated(rawdat$Label))
rawdat <- rawdat[-c(which(duplicated(rawdat$Label))),]
length(rawdat$Label)
length(unique(rawdat$Label))
# Convert to um from pixel
rawdat$length_um <- rawdat$Length_px * 1.8599975
rawdat$log_size <- log2(rawdat$length_um)
rawdat <- read.csv("../data/TA_Measurements_F75_working.csv")
index_50 <- which(rawdat$Length_px < 50)
rawdat$Length_px[index_50] <- NA
#Find and remove duplicate measures
length(rawdat$Label)
length(unique(rawdat$Label))
which(duplicated(rawdat$Label))
rawdat <- rawdat[-c(which(duplicated(rawdat$Label))),]
length(rawdat$Label)
length(unique(rawdat$Label))
# Convert to um from pixel
rawdat$length_um <- rawdat$Length_px * 1.8599975
rawdat$log_size <- log2(rawdat$length_um)
rawdat_seperate <- separate(rawdat,
col = Label,
into = c("Imager","Replicate","Cohort","Sex","Trait", "Individual"), sep = "_")
rawdat_seperate$Individual <- gsub(x = rawdat_seperate$Individual,
pattern = ".tif",
replacement = "")
rawdat_seperate$Cohort <- gsub(x = rawdat_seperate$Cohort,
pattern = "C",
replacement = "")
with(rawdat_seperate[rawdat_seperate$Trait == "HEAD",],
table(interaction(Replicate, Sex, drop = T), Cohort))
rawdat_seperate$fly_id <- paste(rawdat_seperate$Replicate,
rawdat_seperate$Cohort,
rawdat_seperate$Sex,
rawdat_seperate$Individual,
sep = "_")
names(rawdat_seperate)
rawdat_simple <- rawdat_seperate[, c(3,4,5,6,10,11)]
### Trying to fix sex here
rawdat_simple$fly_id <- gsub("UCTR2_0_F_10", "UCTR2_0_M_21", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("UCTR4_2_F_15", "UCTR4_2_M_21", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("NTR1_1_M_19", "NTR1_1_F_21", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("NTR1_2_F_10", "NTR1_2_M_21", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("NTR1_2_F_12", "NTR1_2_M_22", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("NTR1_2_F_7", "NTR1_2_M_23", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("NTR2_2_F_19", "NTR2_2_M_21", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("NTR3_0_F_15", "NTR3_0_M_21", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("NTR3_0_F_16", "NTR3_0_M_22", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("NTR3_0_F_3", "NTR3_0_M_23", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("NTR4_0_F_20", "NTR4_0_M_21", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("SCTR2_0_F_3", "SCTR2_0_M_21", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("SCTR1_0_M_6", "SCTR1_0_F_21", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("SCTR2_1_M_4", "SCTR2_1_F_21", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("SCTR2_2_F_4", "SCTR2_2_M_21", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("SCTR3_1_M_14", "SCTR3_1_F_21", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("UCTR1_0_F_20", "UCTR1_0_M_21", rawdat_simple$fly_id)
rawdat_simple$fly_id <- gsub("UCTR1_2_F_7", "UCTR1_2_M_21", rawdat_simple$fly_id)
#### Sex has been corrected in fly_id, now to remove old columns, reseperate out fly_id and then recreate fly_id
# I swear this seems easier than doing this in excel.
rawdat_simple <- rawdat_simple[,-c(1:3)]
rawdat_simple <- separate(rawdat_simple,
col = fly_id,
into = c("Replicate","Cohort","Sex","Individual"), sep = "_")
rawdat_seperate$fly_id <- paste(rawdat_seperate$Replicate,
rawdat_seperate$Cohort,
rawdat_seperate$Sex,
rawdat_seperate$Individual,
sep = "_")
## re-check sample sizes since sex changed sample sizes
with(rawdat_simple[rawdat_simple$Trait == "HEAD",],
table(interaction(Replicate, Sex, drop = T), Cohort))
##
wide_fly <- as.data.frame(pivot_wider(rawdat_simple,
names_from = "Trait",
values_from = "log_size"))
head(wide_fly)
wide_fly <- wide_fly %>%
separate(Replicate,
into = c("Treatment", "Replicate"),
sep = "(?<=[A-Za-z])(?=[0-9])"
)
colnames(wide_fly) <- tolower(colnames(wide_fly))
wide_fly$cohort <- as.numeric(wide_fly$cohort)
missing_by_row <- apply(wide_fly, MARGIN = 1, anyNA)
dim(wide_fly)
length(missing_by_row )
temp_dat <- wide_fly[missing_by_row ,]
# for a matrix or array, apply can be super useful
apply(wide_fly[, 6:11], MARGIN = 2, quantile, na.rm = TRUE)
# or sapply will do the same since this is a data.frame we are using
sapply(wide_fly[, 6:11], quantile, na.rm = TRUE)
with(wide_fly,
tapply(head,
INDEX = list(interaction(treatment, replicate, drop = T), cohort, sex),
max, na.rm = TRUE))
with(wide_fly,
tapply(thorax,
INDEX = list(interaction(treatment, replicate, drop = T), cohort, sex),
max, na.rm = TRUE))
with(wide_fly,
tapply(wing,
INDEX = list(interaction(treatment, replicate, drop = T), cohort, sex),
max, na.rm = TRUE))
with(wide_fly,
tapply(femur,
INDEX = list(interaction(treatment, replicate, drop = T), cohort, sex),
max, na.rm = TRUE))
with(wide_fly,
tapply(tibia,
INDEX = list(interaction(treatment, replicate, drop = T), cohort, sex),
max, na.rm = TRUE))
with(wide_fly,
tapply(tarsus,
INDEX = list(interaction(treatment, replicate, drop = T), cohort, sex),
max, na.rm = TRUE))
skim(wide_fly)
#Trait by sex histogram
ggplot(wide_fly, aes(x = femur, fill = treatment)) +
facet_wrap(vars(sex)) +
geom_histogram(binwidth = 0.05, alpha = 0.8)
# ID: I added this in
ggplot(wide_fly, aes(x = femur, colour = treatment)) +
geom_density(alpha = 0.7) +
facet_wrap(vars(sex))
# NOTE FROM ID: but you may find ridge plots easier to see
ggplot(wide_fly, aes(x = femur, y = treatment, colour = treatment)) +
geom_density_ridges(alpha = 0.5) +
facet_wrap(vars(sex))
ggplot(wide_fly, aes(x = cohort, y = head, colour = treatment)) +
geom_quasirandom(alpha = 0.4) +
geom_smooth() +
facet_wrap(vars(sex))
ggplot(wide_fly, aes(x = replicate, y = thorax, colour = as.factor(cohort))) +
geom_quasirandom(alpha = 0.4) +
facet_wrap(vars(treatment, sex))
ggplot(wide_fly, aes(x = replicate, y = wing, colour = as.factor(cohort))) +
geom_quasirandom(alpha = 0.4) +
facet_wrap(vars(treatment, sex))
ggplot(wide_fly, aes(x = replicate, y = femur, colour = as.factor(cohort))) +
geom_quasirandom(alpha = 0.4) +
facet_wrap(vars(treatment, sex))
ggplot(wide_fly, aes(x = replicate, y = tibia, colour = as.factor(cohort))) +
geom_quasirandom(alpha = 0.4) +
facet_wrap(vars(treatment, sex))
ggplot(wide_fly, aes(x = replicate, y = tarsus, colour = as.factor(cohort))) +
geom_quasirandom(alpha = 0.4) +
facet_wrap(vars(treatment, sex))
# Comparison between two traits and if they differ in the sexes or in the cohorts
ggplot(wide_fly, aes(y = femur, x = thorax, colour = treatment)) +
geom_jitter(width = 0, height = 0.3, alpha = 0.5) +
facet_grid(vars(cohort, sex)) +
geom_smooth(method = lm)
wide_fly$sex <- as.factor(wide_fly$sex)
wide_fly$sex <- relevel(wide_fly$sex, "M")
wide_fly$treatment <- factor(wide_fly$treatment)
wide_fly$treatment <- relevel(wide_fly$treatment, "NTR")
wide_fly$replicate <- as.factor(wide_fly$replicate)
# centre thorax
wide_fly$thorax_c <- scale(wide_fly$thorax,
center = TRUE, scale = FALSE)
str(wide_fly$cohort)
thorax_model1 <- glmmTMB(thorax ~ (sex + treatment + cohort)^3
+ (1 + cohort| treatment:replicate),
data = wide_fly)
summary(thorax_model1)
car::Anova(thorax_model1)
thorax_model1 <- glmmTMB(thorax ~ (sex + treatment + cohort)^3
+ diag(1 + cohort| treatment:replicate),
data = wide_fly)
summary(thorax_model1)
car::Anova(thorax_model1)
wing_Allometry <- glmmTMB(wing ~ (sex + treatment + thorax_c)^3
+ (1 + thorax_c | treatment:replicate),
data = wide_fly)
summary(wing_Allometry)
car::Anova(wing_Allometry)
#wing model
wing_Allometry <- glmmTMB(wing ~ (sex + treatment + thorax_c)^3
+ (1 + thorax_c | treatment:replicate),
data = wide_fly,
control = glmmTMBControl(optimizer = optim, #nlminb #optim
optArgs = list(method="BFGS")))
#wing model
wing_Allometry <- glmmTMB(wing ~ (sex + treatment + thorax_c)^3
+ (1 + thorax_c | treatment:replicate),
data = wide_fly,
control = glmmTMBControl(optimizer = nlminb, #nlminb #optim
optArgs = list(method="BFGS")))
#wing model
wing_Allometry <- glmmTMB(wing ~ (sex + treatment + thorax_c)^2
+ (1 + thorax_c | treatment:replicate),
data = wide_fly)
wing_Allometry <- glmmTMB(wing ~ (sex + treatment + thorax_c)^3
+ diag(1 + thorax_c | treatment:replicate),
data = wide_fly)
summary(wing_Allometry)
car::Anova(wing_Allometry)
head_Allometry <- glmmTMB(head ~ (sex + treatment + thorax_c)^3
+ (1 + thorax_c | treatment:replicate),
data = wide_fly)
head_Allometry <- glmmTMB(head ~ (sex + treatment + thorax_c)^3
+ diag(1 + thorax_c | treatment:replicate),
data = wide_fly)
summary(head_Allometry)
car::Anova(head_Allometry)
tibia_Allometry <- glmmTMB(tibia ~ (sex + treatment + thorax_c)^3
+ (1 + thorax_c | treatment:replicate),
data = wide_fly)
summary(tibia_Allometry)
car::Anova(tibia_Allometry)
tibia_Allometry <- glmmTMB(tibia ~ (sex + treatment + thorax_c)^3
+ diag(1 + thorax_c | treatment:replicate),
data = wide_fly)
summary(tibia_Allometry)
car::Anova(tibia_Allometry)
tarsus_Allometry <- glmmTMB(tarsus ~ (sex + treatment + thorax_c)^3
+ diag(1 + thorax_c | treatment:replicate),
data = wide_fly)
summary(tarsus_Allometry)
car::Anova(tarsus_Allometry)
# Should give really similar results
tarsus_condition <- glmmTMB(tarsus ~ (sex + treatment + cohort)^3
+ diag(1 + cohort| treatment:replicate),
data = wide_fly)
# Should give really similar results
tarsus_condition <- glmmTMB(tarsus ~ (sex + treatment + cohort)^3
+ (1 + cohort| treatment:replicate),
data = wide_fly)
summary(tarsus_Allometry)
summary(tarsus_condition)
car::Anova(tarsus_condition)
?glmmTMB
